[project]
name = "mcp-proxy"
authors = [{ name = "Sergey Parfenyuk", email = "sergey.parfenyuk@gmail.com" }]
version = "0.2.1"
requires-python = ">=3.11"
dependencies = ["mcp"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project.scripts]
mcp-proxy = "mcp_proxy.__main__:main"

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.25.0",
    "coverage>=7.6.0",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_covered = true
show_missing = true
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    '$\s*assert_never\(',
    'if __name__ == .__main__.:',
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "EM101",  # Exception must not use a string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class
    "ERA001", # Found commented-out code
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "INP001"]

[tool.ruff]
line-length = 100

[tool.pytest.ini_options]
pythonpath = "src"
addopts = ["--import-mode=importlib"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
